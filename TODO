--== Features ==--

* Broker as a library: Designed as a reusable library that allows to
  MQTT server and client solutions. What to create a pure MQTT server
  with an specific functionally or provide support of MQTT to your
  existing project, then libMyQTT is for you.

* Several contexts: libMyQtt can start several context into the same
  process allowing to start different configurations with different
  settings.

* Modular and extensible design that allows extending the ready to
  user server (myqttd) by providing plugins or to integreated libmyqtt
  into your application to create MQTT client or server solutions.

* Multi-thread support: the library and all components are designed
  and built using multi-threading so multi-core scenarios can take
  advantage of it.

* External Eventloop support: MyQtt library supports several external
  I/O wait mechanism. By default epoll() is used if present.

* Support for TLS SNI and a particular design to easily allow
  integration of different certificates according to the serverName
  provided.

* Support MQTT, MQTT over TLS, MQTT over WebSocket and MQTT over
  TLS-WebSocket

* MyQttd server provides an extensible and plugable auth backend which
  allows having different authoration engines running at the same
  time. Default auth backend provided is not built-in but provided by
  a module.

* Support for automatic and transparent connection reconnect (if 
  enabled) for all transports supported (mqtt, mqtt-tls, mqtt-ws and
  myqtt-wss).

--== roadmap ==--

* Add wildcard support (for message retention too).

* Big message support (review and strenghten current limits).

* High load support (review and strenghten current limits).

* Add support for cluster support

--== things that should be reviewed ==--

* Review:
  http://www.hivemq.com/mqtt-security-fundamentals-authorization/

* Review fuzzing tool and use to check myqtt stack:
  https://groups.google.com/d/msg/mqtt/XoHva7vPsDM/UJhytUsmBLcJ

* Add support to get a list of active topics: 
  https://groups.google.com/d/msg/mqtt/03QiWpz4kHY/1g52eTb9ou4J
  https://groups.google.com/d/msg/mqtt/03QiWpz4kHY/RygE9M0rFAcJ

* Add support for certificate revocation list and to reload it on real
  time if it is updated.

* Post a reference as a comment on the following page about 
  <drop-conn-same-client-id value="yes" /> to implement the standard
  (even though it makes no sense):  http://2lemetry.com/2014/10/24/avoiding-mqtt-pitfalls/

* Remove references to ppath concept inside myqttd

* Limit subscription size somehow. It could be a memory problem.

* Make client library to try to connect with 3.1.1 and if it fails, with 
  3.1.

* Disable wildcard subscription for certain users.

* After publishing first or second release, make the way to have myqtt
  listed under: http://mqtt.org/wiki/doku.php/server_support

* Limit utf-8 strings to avoid memory consumption. It makes no sense
  to have a username or password with 64K long (or the client
  identifier).

* Add support for will message storage (through external handler).

* Ensure support for:
  http://jpmens.net/2013/02/25/lots-of-messages-mqtt-pub-sub-and-the-mosquitto-broker/

* Ensure support for:
  http://www.hardill.me.uk/wordpress/2013/03/24/d3-mqtt-tree-visualiser-updated/
  http://test.mosquitto.org/sys/

* Ensure support to limit persistent messages duration for persistent
  clients:
  https://groups.google.com/d/msg/mqtt/fjVNfZJ46dI/p_F7DG5SBsIJ

* Implement simple presense implementation based on the following notes:
  http://stackoverflow.com/questions/19057835/how-to-find-connected-mqtt-client-details

* Review and provide support for message ordering differences:
  https://groups.google.com/forum/#!msg/mqtt/UfcO0HtLq9s/cjboTzdoR64J

* Review and provide support to limit that certain user or client id can 
  publish messages in all topics while others don't.
  https://groups.google.com/forum/#!msg/mqtt/t9a9cSfPNns/S9IyJo5GYYMJ

* Some way of dynamically configuring/starting/stopping bridges, either
  via messages or via files (a directory watched by the daemon).

* More hooks to implement via plugin system, hook on store messages,
  hook on send message, hook on receive message.

* External storage connector with  "casssandra"

* External storage connector with "mongodb"

* Think handling load is key for the IoT ....if we can get say 250 000
  concurrent connections on a single server that would really help - 500 000
  would be epic.

* BIG options is router - allowing device to be route to dedicated mosquitto
  broker - diff to clustering :)...clustering is complex, routing is easy
 
* Rules engine for routing in-comming message

* MONITORING options - keeping an eye on load and troughput for tests and
  support.

* Review http://www.aspl.es/docs/SIOTPostProceedings.pdf



--== release names ==--

Disculpad mi osadia
I against I 
Todos duermen ya
Jugar al azar
Al corriente ense√±a el caminio hacia el mar
